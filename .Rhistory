install.packages("KernSmooth")
library(KernSmooth)
q()
q()
is.na(initial)
> is.na(x)
is.na(x)
print(initial)
initial <- read.table("hw1_data.csv", 2)
print(initial)
initial <- read.table("hw1_data.csv", 2)
setwd("C:/Users/Fabiana.Mario-PC/Downloads/Coursera/workspace/ProgrammingAssignment2")
source(cachematrix.R)
cd
source("cachematrix.R")
setwd("C:/Users/Fabiana.Mario-PC/Downloads/Coursera/workspace/ProgrammingAssignment2/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
matrix(c(1,2,3,4), nrow=2, ncol=2)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$get()
amatrix$getinverse()
raceback()
traceback()
amatrix$getinverse()
traceback()
debug(amatrix$getinverse)
