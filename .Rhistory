install.packages("KernSmooth")
library(KernSmooth)
q()
q()
is.na(initial)
> is.na(x)
is.na(x)
print(initial)
initial <- read.table("hw1_data.csv", 2)
print(initial)
initial <- read.table("hw1_data.csv", 2)
setwd("C:/Users/Fabiana.Mario-PC/Downloads/Coursera/workspace/ProgrammingAssignment2/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
amatrix$getInverse()  # Returns matrix inverse
